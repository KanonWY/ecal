name: Build Windows Server 2019

on:  
  push:
  pull_request:
    branches:
      - master

jobs:
  build-windows:
    runs-on: windows-2019

    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: 'win64_msvc2015_64'
        
    # Downgrading nuget is required as of 2021-04-23, as nuget 5.9.1.111 fails installing protobuf
    # https://github.com/actions/virtual-environments/issues/3240
    - name: Downgrade nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.8.x'
        
    - name: Install Dependencies
      # choco install of version 1.9.3 produced a checksum error
      run: choco install doxygen.install --version=1.9.2

    - name: Uninstall Chocolatey
      run: move "$env:PROGRAMDATA\chocolatey" "$env:PROGRAMDATA\_chocolatey"

#    - name: Install Capâ€™n Proto
#      run: |
#        mkdir "${{ runner.workspace }}/capnp"
#        cd "${{ runner.workspace }}/capnp"
#        git clone https://github.com/sandstorm-io/capnproto.git
#        cd capnproto
#        git checkout release-0.9.0
#        cd c++
#        mkdir _build
#        cd _build
#        cmake .. -G "Visual Studio 16 2019" -A x64
#        cmake --build . --parallel --config Release
#        cmake --build . --target install --config Release

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules:  'true'
        fetch-depth: 0

    - name: Download NPCAP
      run: |
        cd %GITHUB_WORKSPACE%
        powershell -Command "& 'build_win\download_npcap.ps1'"
      shell: cmd
      
    - name: Create Python virtualenv
      run: |
        mkdir "${{ runner.workspace }}\_build\complete\.venv\"
        
        # At the moment (2021-10-27) there is no official Python 3.10 lxml package available on pypi. Thus we use python 3.9.
        py -3.9 -m venv "${{ runner.workspace }}\.venv"
        CALL "${{ runner.workspace }}\.venv\Scripts\activate.bat"
           
        echo Upgrading pip
        python -m pip install --upgrade pip
        
        pip install wheel
        
        echo Installing python requirements
        pip install -r "%GITHUB_WORKSPACE%\requirements.txt"

      shell: cmd
      
    - name: Create eCAL ini
      run: | 
        mkdir "%ALLUSERSPROFILE%\eCAL"
        copy ".\ecal\core\cfg\ecal.ini" "%ALLUSERSPROFILE%\eCAL"
        
    - name: Activate MSVC command
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: 'x64' 
        toolset: '14.0'
    
    - uses: lukka/get-cmake@latest

    - name: Build SDK
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-ci-components-sdk'
        buildPreset: 'windows-ci-components-sdk'

    - name: Build Complete
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'windows-ci-components-sdk'
        buildPreset: 'windows-ci-components-sdk'

#    # Create Python.
#    # The strang-looking double-cmake is an ugly workaround to force CMake to
#    # re-find Python, after we have changed the venv from the outside. The
#    # alternative would be to clean everything, which would cause an unnecessary
#    # rebuild of eCAL and HDF5 for each python Version.
#    - name: Build Python 3.10 Wheel
#      run: |
#        mkdir ".venv_310"
#        py -3.10 -m venv ".venv_310"
#        CALL ".venv_310\Scripts\activate.bat"
#        pip install wheel
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=FIRST
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=ONLY
#        cmake --build . --target create_python_wheel --config Release
#      shell: cmd
#      working-directory: ${{ runner.workspace }}/_build/complete
#      
#    - name: Build Python 3.9 Wheel
#      run: |
#        mkdir ".venv_39"
#        py -3.9 -m venv ".venv_39"
#        CALL ".venv_39\Scripts\activate.bat"
#        pip install wheel
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=FIRST
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=ONLY
#        cmake --build . --target create_python_wheel --config Release
#      shell: cmd
#      working-directory: ${{ runner.workspace }}/_build/complete
#
#    - name: Build Python 3.8 Wheel
#      run: |
#        mkdir ".venv_38"
#        py -3.8 -m venv ".venv_38"
#        CALL ".venv_38\Scripts\activate.bat"
#        pip install wheel
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=FIRST
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=ONLY
#        cmake --build . --target create_python_wheel --config Release
#      shell: cmd
#      working-directory: ${{ runner.workspace }}/_build/complete
#      
#    - name: Build Python 3.7 Wheel
#      run: |
#        mkdir ".venv_37"
#        py -3.7 -m venv ".venv_37"
#        CALL ".venv_37\Scripts\activate.bat"
#        pip install wheel
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=FIRST
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=ONLY
#        cmake --build . --target create_python_wheel --config Release
#      shell: cmd
#      working-directory: ${{ runner.workspace }}/_build/complete
#      
#    - name: Build Python 3.6 Wheel
#      run: |
#        mkdir ".venv_36"
#        py -3.6 -m venv ".venv_36"
#        CALL ".venv_36\Scripts\activate.bat"
#        pip install wheel
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=FIRST
#        cmake %GITHUB_WORKSPACE% -G "Ninja" -DPython_FIND_VIRTUALENV=ONLY
#        cmake --build . --target create_python_wheel --config Release
#      shell: cmd
#      working-directory: ${{ runner.workspace }}/_build/complete
#      
#    - name: Build Python 3.5 Wheel
#      run: |
#        mkdir ".venv_35"
#        py -3.5 -m venv ".venv_35"
#        CALL ".venv_35\Scripts\activate.bat"
#        pip install wheel
#        cmake %GITHUB_WORKSPACE% -G "Ninja"-DPython_FIND_VIRTUALENV=FIRST
#        cmake %GITHUB_WORKSPACE% -G "Ninja"-DPython_FIND_VIRTUALENV=ONLY
#        cmake --build . --target create_python_wheel --config Release
#      shell: cmd
#      working-directory: ${{ runner.workspace }}/_build/complete

#    - name: Build Documentation C
#      run: cmake --build . --target documentation_c
#      working-directory: ${{ runner.workspace }}/_build
#
#    - name: Build Documentation C++
#      run: cmake --build . --target documentation_cpp
#      working-directory: ${{ runner.workspace }}/_build

    - name: Run Tests
      run: ctest -C Release -V
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Pack SDK
      run: cpack -C Debug
      working-directory: ${{ runner.workspace }}/_build/sdk

    - name: Pack complete setup
      run: cpack -C Release
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Upload Windows setup
      uses: actions/upload-artifact@v2
      with:
        name: windows-setup
        path: ${{ runner.workspace }}/_build/complete/_deploy/*.exe

    - name: Upload Python Wheels
      uses: actions/upload-artifact@v2
      with:
        name: windows-python-wheels
        path: ${{ runner.workspace }}/_build/complete/_deploy/*.whl
